Longest sub-string with N unique characters

The program must find the length L of the longest sub-string with N unique characters in a given string value S.

Input Format:
The first line will contain the string value S.
The second line will contain the number of unique characters N.

Boundary Conditions:
3 <= S <= 200
N <= 1 <= 10

Output Format:
Length L of the sub-string longest sub-string with N unique characters.


Example Input/Output 1:

Input:
abcdcdabcdef
2

Output:
4

Explanation:
The longest possible substring with 2 unique characters in abcdcdabcdef is cdcd whose length is 4.


Example Input/Output 2:

Input:
manager
3

Output:
4

Explanation:
The longest possible substring with 3 unique characters in manager is either mana or anag whose length is 4.


Example Input/Output 3:

Input:
dddddddddddd
1

Output:
12

Explanation:
The longest possible substring with 1 unique character in dddddddddddd is dddddddddddd itself which is 12.

sol:
#include <iostream>
#include<string> 
using namespace std;

int distinct(string s){
    int characters[95]={0},count=0,i;
    //cout<<s<<endl;
    for(i=0;i<s.length();i++){
        if(characters[s[i]-'!']==0){
            characters[s[i]-'!']++;
            count++;
        }
    }
    return count;
}

int main(int argc, char** argv)
{
    string s;
    int n,i,j,k;
    cin>>s>>n;
    i=0;
    k=s.length();
    int distance=0;
    for(i=0;i<s.length()-n;i++){
        k=s.length()-i;
        while(k>n){
        string sub=s.substr(i,k);
        int dis=distinct(sub);
        if(dis==n){
           if(distance<k){
               distance=k;
           }
        }
        k--;
    }}
    cout<<distance;
    return 0;
}
