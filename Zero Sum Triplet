Zero Sum Triplet

Problem Statement:
Given an array N integers, there are elements a, b, c in the array such that a + b + c = 0. Find all unique triplets in the array which gives the sum as zero.

Note:
Elements in a triplet (a,b,c) must be in ascending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
If no triplet is found print "None" (Quotes are for clarity and not part of the output).

Input Format:
Single input string with the integers separated by space. You must parse and split the array of numbers from the input string.

Output Format:
Print all possible triplets as specified in the problem statement. Each triplet has to be printed in a separate line.
Within a triplet the three numbers should be separated by space. The list of triplets should be printed in sorted order.

Sample Input1:
-1 0 1 2 -1 -4
Sample Output1:
-1 -1 2
-1 0 1
Sample Input2:
-5 9 2 -4 3
Sample Output2:
-5 -4 9
-5 2 3
Sample Input3:
9 3 -6 -7 90
Sample Output3:
None

sol:
#include <iostream>
#include<algorithm>
#include<vector>
#include<stdio.h>
using namespace std;

int main() {
	// your code goes here
	int i=0,j,k,l,count=0,m=0;
	char c=' ';
	vector<int> arr;
	while(c!='\n' ){
	    scanf("%d%c",&j,&c);
	    arr.push_back(j);
	}
	sort(arr.begin(),arr.begin()+arr.size());
	l=arr.size();
    for(i=0;i<l-2;i++){
        if(i>0 && arr[i]==arr[i-1])
            continue;
        for(j=i+1;j<l-1;j++){
            for(k=j+1;k<l;k++){
                if(arr[i]+arr[j]+arr[k]==0){
                    cout<<arr[i]<<" "<<arr[j]<<" "<<arr[k]<<endl;
                    count++;
                    goto a;
                }
            }
            a:m++;
        }
    }
    if(count==0)
        cout<<"None";
    return 0;
}
