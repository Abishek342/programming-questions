A string S with parantheses ( and ) along with some aplphabets is passed as input to the program. The program must remove the unbalanced (not matched) parantheses and then print the string value as the output.
Incase several options are possible, the match a closing parantheses ) to the opening parantheses ( which is as far as possible.

Input Format:
The first line will contain S

Output Format:
The first line will contain the string value with the balanced parantheses.

Boundary Conditions:
2 <= Length of S <= 1000

Example Input/Output 1:
Input:
((xyz)((mno))

Output:
((xyz)(mno))

Explanation:
Here two options are possible - ((xyz)(mno)) and (xyz)((mno)). But as ) must be matched to a ( which is as far as possible, ((xyz)(mno)) is printed as the output.

Example Input/Output 2:
Input:
((((abc))

Output:
((abc))

Example Input/Output 3:
Input:
(((ab)CD((HJ)KL))

Output:
(((ab)CD(HJ)KL))

Example Input/Output 4:
Input:
(((ab)CD((HJ)KL))))

Output:
(((ab)CD((HJ)KL)))

Example Input/Output 5:
Input:
)()

Output:
()

// i can't complete the requirement of the ide but i have come up with logic. it is not the answer for the above question.
coding:
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

int main(int argc,char **argv)
{
string s;
cin>>s;

int n=s.length(),i,j=0;
vector<int> open,close;
for(i=0;i<n;i++){
    if(s[i]=='('){
        open.push_back(i);
    }
    else if(s[i]==')'){
        if(open.empty()){
            close.push_back(i);
        }
        else{
            if(i==n-1){
                open.erase(open.begin());
                continue;
            }if(j==0){
            open.pop_back();
                j++;
            }
            else
            open.erase(open.begin());
        }
    }
}
if((!open.empty())){
    for(i=0;i<open.size();i++){
        s[open[i]]='0';

    }
}
if(!close.empty()){
    for(i=0;i<close.size();i++){
        s[close[i]]='0';
    }
}
for(i=0;i<n;i++){
    if(s[i]!='0'){
        cout<<s[i];
    }
}
return 0;



}


